<?xml version="1.0"?>
<course xmlns:h="http://www.w3.org/1999/xhtml"><title> Parallel ProgrammingLanguages and Systems (Level 10) (INFR10015)</title><outline><school>School of Informatics</school><college>College of Science and Engineering</college><course_type>Standard</course_type><availability>Available to all students</availability><credit_level>SCQF Level 10 (Year 4 Undergraduate)</credit_level><credits>10</credits><subj_area>Informatics</subj_area><other_subj_area>None</other_subj_area><website>http://www.inf.ed.ac.uk/teaching/courses/ppls</website><gaelic_taught>No</gaelic_taught><c_description>The module familiarizes students with
the issues involved in designing, implementing and applying
parallel programming systems. Initial motivation will be provided
by consideration of a number of typical high performance
applications and parallel architectures. This will highlight the
role of parallel software systems as a means of bridging the gap
between these and allow abstraction of the issues which must be
addressed by any such system (partitioning, communication,
agglomeration, scheduling). It will explore the ways in which these
challenges have been addressed by a range of systems, including
both de facto standards and more adventurous research
projects.</c_description></outline><entry_requirements><prerequisites/><corequisites/><restrictions>Students MUST NOT also be taking Parallel Programming
Languages and Systems (Level 11) (INFR11023)</restrictions><other_requirements>Successful completion of Year 3 of an Informatics
Single or Combined Honours Degree, or equivalent by permission of
the School. Students must also be competent programmers in C, C++
or Java and have an appreciation of the connection between log_2
and 2^.</other_requirements><additional_costs>None</additional_costs></entry_requirements><vs_info><prerequisites>None</prerequisites><visit_students>Yes</visit_students></vs_info><delivery_info><delivery_period> 2012/13 Semester2, Available to all students (SV1) </delivery_period><learn_enabled>  No</learn_enabled><quota>  None</quota><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday/><Tuesday>09:00 - 09:50</Tuesday><Wednesday/><Thursday/><Friday/></time></activity><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday/><Tuesday/><Wednesday/><Thursday/><Friday>09:00 - 09:50</Friday></time></activity><first_class>Week 1, Tuesday, 09:00 - 09:50,
Zone: Central. Lecture Theatre 1, 7 Bristo Square</first_class><exam_info><exam><exam_diet>Main Exam Diet S2
(April/May)</exam_diet><paper_name/><duration>2:00</duration></exam></exam_info></delivery_info><learning_outcomes>1 - Describe generic issues (as discussed in the syllabus)
which must be addressed by any parallel programming system.
2 - Explain, given a description of a previously unseen parallel
application, where specific instances of the generic issues will
arise.
3 - Explain, in considerable detail, the ways in which the generic
issues are addressed by the MPI and Pthreads programming models and
their supporting infrastructure.
4 - Apply their practical experience with MPI and Pthreads to write
clean, adaptable and scalable parallel programs for simple
applications.
5 - Compare the approaches proposed by a range of more speculative
programming models.</learning_outcomes><assessment>Written Examination 80
Assessed Assignments 20
Oral Presentations 0

Assessment will be by a combination of
* short programming exercises, designed to familiarize students
with the practicalities of parallel programming
* pencil-and-paper exercises

If delivered in semester 1, this course will have an option for
semester 1 only visiting undergraduate students, providing
assessment prior to the end of the calendar year.</assessment><special_arrangements>None</special_arrangements><additional_info><academic_description>Not entered</academic_description><syllabus>* Introduction. Conceptual and architectural models
of parallelism. Parallel algorithmic paradigms and simple parallel
algorithms.Iterative, recursive pipeline and bag-of-task
parallelism.
* Generic issues in shared variable programming. Mutual exclusion,
condition synchronization. Locks, barriers semaphores and monitors,
use and implementation.
* Realisation in Pthreads and Java.
* Issues in message passing programming. Channels and
synchronization models.
* Realisation in MPI: communicators, simple and collective
operations
* Selected case studies highlighting alternative approaches, for
example,
o Associative models. Linda, tuple space and related
primitives.
o Shared Virtual Memory with Treadmarks.

Relevant QAA Computing Curriculum Sections: Concurrency and
Parallelism</syllabus><transferable_skills>Not entered</transferable_skills><reading_list>* G.R. Andrews, Foundations of Multithreaded,
Parallel and Distributed Programming, 2000.
* B. Wilkinson, M.Allen, 'Parallel Programming, Techniques and
Applications', 1999.
* I Foster, 'Designing and Building Parallel Programs', 1995.
* M.J.Quinn, 'Parallel Programming in C with MPI and OpenMP',
2004.
* Selected research papers.</reading_list><study_abroad>Not entered</study_abroad><study_pattern>Lectures 20
Tutorials 0
Timetabled Laboratories 0
Non-timetabled assessed assignments 20
Private Study/Other 60
Total 100</study_pattern><keywords>Not entered</keywords></additional_info><contacts><course_organiser>Dr Mary Cryan
Tel: (0131 6)50 5153
Email: mcryan@inf.ed.ac.uk</course_organiser><course_secretary>Miss Kate Weston
Tel: (0131 6)50 2701
Email: Kate.Weston@ed.ac.uk</course_secretary></contacts></course>
