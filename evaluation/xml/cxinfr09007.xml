<?xml version="1.0"?>
<course xmlns:h="http://www.w3.org/1999/xhtml"><title> Compiling Techniques(INFR09007)</title><outline><school>School of Informatics</school><college>College of Science and Engineering</college><course_type>Standard</course_type><availability>Available to all students</availability><credit_level>SCQF Level 9 (Year 3 Undergraduate)</credit_level><credits>10</credits><subj_area>Informatics</subj_area><other_subj_area>None</other_subj_area><website>http://www.inf.ed.ac.uk/teaching/courses/ct</website><gaelic_taught>No</gaelic_taught><c_description>This course describes the phases of a
modern programming language compiler with an emphasis on
widely-used techniques. The course project will require students to
implement fragments of a compiler for an imperative programming
language.</c_description></outline><entry_requirements><prerequisites/><corequisites/><restrictions/><other_requirements>Successful completion of Year 2 of an Informatics
Single or Combined Degree, or equivalent by permission of the
School.

This course has the following mathematics prerequisites:

1 - General background: integers/real numbers, set theory: union,
intersection,...
2 - Graph theory, in particular, directed/undirected graphs,
cyclic/acyclic graphs, labeled graphs, trees, subgraph isomorphism,
graph colouring.
3 - Algebraic structures, in particular, lattices and
join/meet.</other_requirements><additional_costs>None</additional_costs></entry_requirements><vs_info><prerequisites>None</prerequisites><visit_students>Yes</visit_students></vs_info><delivery_info><delivery_period> 2012/13 Semester2, Available to all students (SV1) </delivery_period><learn_enabled>  No</learn_enabled><quota>  None</quota><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday/><Tuesday/><Wednesday/><Thursday>14:00 - 14:50</Thursday><Friday/></time></activity><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday>14:00 - 14:50</Monday><Tuesday/><Wednesday/><Thursday/><Friday/></time></activity><first_class>Week 1, Monday, 14:10 - 15:00,
Zone: Central. D.02, Forrest Hill</first_class><exam_info><exam><exam_diet>Main Exam Diet S2
(April/May)</exam_diet><paper_name/><duration>2:00</duration></exam><exam><exam_diet>Resit Exam Diet (August)</exam_diet><paper_name/><duration>2:00</duration></exam></exam_info></delivery_info><learning_outcomes>1 - Understanding of the processes involved in compilation, and
knowledge of the techniques applied.
2 - Analysis of compilation tasks.
3 - Implementation of compilation algorithms.</learning_outcomes><assessment>Written Examination 75
Assessed Assignments 25
Oral Presentations 0

Assessment
Two practical compiler exercises.

If delivered in semester 1, this course will have an option for
semester 1 only visiting undergraduate students, providing
assessment prior to the end of the calendar year.</assessment><special_arrangements>None</special_arrangements><additional_info><academic_description>Not entered</academic_description><syllabus>*Introduction: structure of a compiler.
*Lexical analysis: tokens, regular expressions, Lex.
*Parsing: context-free grammars, predictive and LR parsing,
Yacc.
*Abstract syntax: semantic actions, abstract parse trees.
*Semantic analysis: symbol tables, bindings, type-checking.
*Stack frames: representation and abstraction.
*Intermediate code: representation trees, translation.
*Basic blocks and traces: canonical trees and conditional
branches.
*Instruction selection: algorithms for selection, RISC and
CISC.
*Liveness analysis: solution of dataflow equations.
*Register allocation: colouring by simplification,
coalescing.
*Advanced Topics

Relevant QAA Computing Curriculum Sections: Compilers and Syntax
Directed Tools</syllabus><transferable_skills>Not entered</transferable_skills><reading_list>* Andrew W. Appel, Modern Compiler Implementation,
Cambridge University Press, 1998. Three versions of this book are
available which present code fragments from the compiler in the
languages C, Standard ML and Java. Students should use whichever
version of the book they prefer.
* Alfred V. Aho, Ravi Sethi, Jeffrey D, Ullman, Compilers:
Principles, Techniques and Tools. Addison Wesles, 1986.
* Steven Muchnick, Advanced Compiler Design and Implementation.
Morgan Kaufmann, 1997
* Reinhard, Wilhelm, Dieter Maurer, Compiler Design. Addison
Wesley, 1995.
* Charles N. Fischer, Richard J. LeBlank, Jr., Crafting a Compiler
in C. Benjamin/Cummings, 1991.
* Keith Cooper, Linda Torczon, Engineering a Compiler, Morgan
Kaufmann</reading_list><study_abroad>Not entered</study_abroad><study_pattern>Lectures 18
Tutorials 0
Timetabled Laboratories 0
Non-timetabled assessed assignments 30
Private Study/Other 52
Total 100</study_pattern><keywords>Not entered</keywords></additional_info><contacts><course_organiser>Mr Vijayanand Nagarajan
Tel: (0131 6)51 3440
Email: vijay.nagarajan@ed.ac.uk</course_organiser><course_secretary>Mrs Victoria Swann
Tel: (0131 6)51 7607
Email: Vicky.Swann@ed.ac.uk</course_secretary></contacts></course>
