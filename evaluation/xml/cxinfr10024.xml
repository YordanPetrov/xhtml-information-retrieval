<?xml version="1.0"?>
<course xmlns:h="http://www.w3.org/1999/xhtml"><title> Software Architecture,Process, and Management (Level 10) (INFR10024)</title><outline><school>School of Informatics</school><college>College of Science and Engineering</college><course_type>Standard</course_type><availability>Available to all students</availability><credit_level>SCQF Level 10 (Year 4 Undergraduate)</credit_level><credits>10</credits><subj_area>Informatics</subj_area><other_subj_area>None</other_subj_area><website>http://www.inf.ed.ac.uk/teaching/courses/sapm</website><gaelic_taught>No</gaelic_taught><c_description>This course considers the many ways in
which development and maintenance of large software systems differs
from that of small systems. It discusses the high level
architectural decisions that may control the complexity of such
systems,
and the architectural degradation that leads to legacy systems. It
considers the processes by which large systems can be developed and
the role of managers in planning and guiding development,
predicting and mitigating risks, and improving quality.</c_description></outline><entry_requirements><prerequisites>It is RECOMMENDED that students have passed
Software Engineering
with Objects and Components (INFR09016)</prerequisites><corequisites/><restrictions>Students MUST NOT also be taking Software
Architecture, Process, and Management (Level 11)
(INFR11038)</restrictions><other_requirements>Successful completion of Year 3 of an Informatics
Single or Combined Honours Degree, or equivalent by permission of
the School.</other_requirements><additional_costs>None</additional_costs></entry_requirements><vs_info><prerequisites>None</prerequisites><visit_students>Yes</visit_students></vs_info><delivery_info><delivery_period> 2012/13 Semester2, Available to all students (SV1) </delivery_period><learn_enabled>  No</learn_enabled><quota>  None</quota><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday>17:10 - 18:00</Monday><Tuesday/><Wednesday/><Thursday/><Friday/></time></activity><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday/><Tuesday/><Wednesday/><Thursday>17:10 - 18:00</Thursday><Friday/></time></activity><first_class>Week 1, Monday, 17:10 - 18:00,
Zone: Central. Hugh Robson Lecture Theatre, Robson Building</first_class><exam_info><exam><exam_diet>Main Exam Diet S2
(April/May)</exam_diet><paper_name/><duration>2:00</duration></exam></exam_info></delivery_info><learning_outcomes>1 - Describe and explain the challenges inherent in large-scale
system development and outline techniques with which managers can
help meet these challenges.
2 - Propose and justify architectural decisions for large-scale,
long-lived systems.
3 - Explain why software reuse is difficult, and some approaches
for increasing software reuse.
4 - Summarize and apply approaches for maintaining and replacing
legacy code.
5 - Compare and contrast development processes (e.g. Extreme
Programming and the Unified Process) and explain their application
to a project.
6 - Analyse the significant sources of risk for particular projects
and suggest ways to reduce the risks.
7 - Describe, and in some cases be able to use, tools relevant to
large-scale, long-term development, such as requirements
management, configuration, build, test, and project management
tools.
8 - Critically reflect on given software engineering related
articles, from the peer-reviewed literature and elsewhere.</learning_outcomes><assessment>Written Examination 75
Assessed Assignments 25
Oral Presentations 0

If delivered in semester 1, this course will have an option for
semester 1 only visiting undergraduate students, providing
assessment prior to the end of the calendar year.</assessment><special_arrangements>None</special_arrangements><additional_info><academic_description>Not entered</academic_description><syllabus>Large scale software
- The difference that scale makes: from single-person projects to
ultra-large systems
- Tool use: revision control, configuration management, bug/issue
tracking, testing, documentation, and other tools
- Architectural principles and patterns
- Components, product lines and other forms of reuse
- Maintaining and replacing legacy systems

Software Development Processes
- High ceremony processes
- Agile development
- Quality assurance
- Process improvement
- Critical systems, sociotechnical systems, and dependability
- Open source development

Planning and Managing Software Projects
- Requirements management
- Planning projects using size and cost estimation
- Risk management
- Project tracking and change management
- Project and people management: successful teamwork

Relevant QAA Computing Curriculum Sections: Professionalism,
Software Engineering, Systems Analysis and Design</syllabus><transferable_skills>Not entered</transferable_skills><reading_list>* Required: Lecture notes and readings distributed
in class or online
* Recommended: Sommerville, Software Engineering, Addison Wesley
(any edition)</reading_list><study_abroad>Not entered</study_abroad><study_pattern>Lectures 15
Tutorials 0
Timetabled Laboratories 0
Non-timetabled assessed assignments 15
Private Study/Other 70
Total 100</study_pattern><keywords>Not entered</keywords></additional_info><contacts><course_organiser>Dr Mary Cryan
Tel: (0131 6)50 5153
Email: mcryan@inf.ed.ac.uk</course_organiser><course_secretary>Miss Kate Weston
Tel: (0131 6)50 2701
Email: Kate.Weston@ed.ac.uk</course_secretary></contacts></course>
