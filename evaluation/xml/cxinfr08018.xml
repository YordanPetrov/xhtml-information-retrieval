<?xml version="1.0"?>
<course xmlns:h="http://www.w3.org/1999/xhtml"><title> Informatics 2C -Introduction to Computer Systems (INFR08018)</title><outline><school>School of Informatics</school><college>College of Science and Engineering</college><course_type>Standard</course_type><availability>Available to all students</availability><credit_level>SCQF Level 8 (Year 2 Undergraduate)</credit_level><credits>10</credits><subj_area>Informatics</subj_area><other_subj_area>None</other_subj_area><website>http://www.inf.ed.ac.uk/teaching/courses/inf2c-cs/</website><gaelic_taught>No</gaelic_taught><c_description>This course is concerned with the
design, implementation and engineering of digital computer systems.
It offers an introduction to the internal structure of digital
computers.</c_description></outline><entry_requirements><prerequisites>Students MUST have passed: Informatics 1 -
Computation and Logic (INFR08012) AND Informatics 1 -
Data and Analysis (INFR08015) AND Informatics 1 -
Functional Programming (INFR08013) AND Informatics 1 -
Object-Oriented Programming (INFR08014)</prerequisites><corequisites/><restrictions/><other_requirements>None</other_requirements><additional_costs>none</additional_costs></entry_requirements><vs_info><prerequisites>none</prerequisites><visit_students>No</visit_students></vs_info><delivery_info><delivery_period> 2012/13 Semester1, Available to all students (SV1) </delivery_period><learn_enabled>  Yes</learn_enabled><quota>  None</quota><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday/><Tuesday>15:00 - 15:50</Tuesday><Wednesday/><Thursday/><Friday/></time></activity><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday/><Tuesday/><Wednesday/><Thursday/><Friday>15:00 - 15:50</Friday></time></activity><first_class>Week 1, Tuesday, 15:00 - 15:50,
Zone: Central. LT3 Appleton Tower</first_class><exam_info><exam><exam_diet>Main Exam Diet S1
(December)</exam_diet><paper_name/><duration>1:00</duration></exam><exam><exam_diet>Resit Exam Diet (August)</exam_diet><paper_name/><duration>1:00</duration></exam></exam_info></delivery_info><learning_outcomes>- Demonstrate an understanding of binary representation and
basic operations on binary data.
- Demonstrate an understanding of key concepts in computer
architecture, including: exceptions, interrupts, virtual memory,
processes and pipelined execution.
- Sketch the design of a simple processor and explain how it
operates.
- Demonstrate knowledge of I/O devices and the means by which they
interface to a processor and its memory system.
- Demonstrate an understanding of the design and operation of
important combinational and sequential components within a
processor, such as adders, registers, and state machines.
- Demonstrate understanding of an execution pipeline, based on the
MIPS architecture.</learning_outcomes><assessment>Written Examination - 75%
Assessed Assignments - 25%
Oral Presentations - 0%

In order to pass the course you must satisfy all of the following
requirements:
* achieve at least 35% in the examination;
* achieve a total of at least 25% in assessed coursework;
* obtain a combined total mark of at least 40%

There will be at least one assessed exercise.</assessment><special_arrangements>None</special_arrangements><additional_info><academic_description>Not entered</academic_description><syllabus>The primary aim of the course is to convey an
understanding of the internal structure and implementation of
digital computers. To impart this knowledge, we first explain how
the interface between hardware and software is typically
constructed. This interface consists of several key
components:

* The binary representation and manipulation of atomic data.
* The structure of a typical instruction set.
* The environment in which a program executes, and the notion of
processes and virtual memory.

In addition to explaining the interface between hardware and
software, this course introduces the ideas behind the hardware
implementation of a processor. This consists of several further
components:

* Combinational logic - how simple stateless building blocks such
as adders, multiplexers and decoders can be constructed from
logic
elements.
* Sequential logic - how components with state, such as
latches,
registers, register files and memories can be constructed from
logic elements.
* Processor structure - how a simple instruction set can be
implemented using combinational and sequential logic
components.

This material is prefaced by a brief introduction to the C
programming language, which is widely used as a systems programming
language.</syllabus><transferable_skills>Not entered</transferable_skills><reading_list>* D.A. Patterson and J.L. Hennessy, Computer
Organisation and Design 2/e, Morgan Kaufmann, 1998

* A. Silbershatz and P.B. Galvin, Operating Systems Concepts, 5/e,
Wiley, 1998

* B.W. Kernighan and D.M. Ritchie, The C Programming Language, 2/e,
Prentice Hall PTR, 1998</reading_list><study_abroad>Not entered</study_abroad><study_pattern>Lectures 15
Tutorials 5
Timetabled Laboratories 4
Non-timetabled assessed assignments 25
Private Study/Other 51
Total 100</study_pattern><keywords>Not entered</keywords></additional_info><contacts><course_organiser>Prof Colin Stirling
Tel: (0131 6)50 5186
Email: cps@inf.ed.ac.uk</course_organiser><course_secretary>Ms Kendal Reid
Tel: (0131 6)50 5194
Email: kr@inf.ed.ac.uk</course_secretary></contacts></course>
