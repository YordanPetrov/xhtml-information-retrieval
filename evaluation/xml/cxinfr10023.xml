<?xml version="1.0"?>
<course xmlns:h="http://www.w3.org/1999/xhtml"><title> Compiler Optimisation(Level 10) (INFR10023)</title><outline><school>School of Informatics</school><college>College of Science and Engineering</college><course_type>Standard</course_type><availability>Available to all students</availability><credit_level>SCQF Level 10 (Year 4 Undergraduate)</credit_level><credits>10</credits><subj_area>Informatics</subj_area><other_subj_area>None</other_subj_area><website>http://www.inf.ed.ac.uk/teaching/courses/copt</website><gaelic_taught>No</gaelic_taught><c_description>This course introduces students to
modern techniques in efficient implementation of programming
languages. Modern processors and systems are designed based on the
assumption that a compiler will be able to effectively exploit
architectural resources. This course will examine in detail
techniques to exploit instruction level parallelism, memory
hierarchy and higher level parallelism. It will examine classic
static analysis approaches to these problems. The course work will
require students to implement selected optimisations in a research
compiler.</c_description></outline><entry_requirements><prerequisites/><corequisites/><restrictions>Students MUST NOT also be taking Compiler Optimisation
(Level 11) (INFR11032)</restrictions><other_requirements>Successful completion of Year 3 of an Informatics
Single or Combined Honours Degree, or equivalent by permission of
the School. Students are expected to be competent programmers in C,
C++ or Java.</other_requirements><additional_costs>None</additional_costs></entry_requirements><vs_info><prerequisites>None</prerequisites><visit_students>Yes</visit_students></vs_info><delivery_info><delivery_period> 2012/13 Semester2, Available to all students (SV1) </delivery_period><learn_enabled>  No</learn_enabled><quota>  None</quota><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday/><Tuesday/><Wednesday/><Thursday>10:00 - 10:50</Thursday><Friday/></time></activity><activity><Location>Central</Location><Activity>Lecture</Activity><Description/><time><Monday>10:00 - 10:50</Monday><Tuesday/><Wednesday/><Thursday/><Friday/></time></activity><first_class>Week 1, Monday, 10:00 - 10:50,
Zone: Central. Lecture Theatre 4, 7 Bristo Square</first_class><exam_info><exam><exam_diet>Main Exam Diet S2
(April/May)</exam_diet><paper_name/><duration>2:00</duration></exam></exam_info></delivery_info><learning_outcomes>1 - Understanding of inherent computational complexity of
optimisation
2 - Development of optimizations via search based approaches
3 - Ability to parallelise programs via systematic algorithms
4 - Knowledge of dynamic and adaptive approaches to modern
optimisation</learning_outcomes><assessment>Written Examination 75
Assessed Assignments 25
Oral Presentations 0

Assessment
The coursework will consist of two practical compiler exercises
where students will design and implement an optimisation and
evaluate it on a set of benchmarks, writing a report on their work
and findings.

If delivered in semester 1, this course will have an option for
semester 1 only visiting undergraduate students, providing
assessment prior to the end of the calendar year.</assessment><special_arrangements>None</special_arrangements><additional_info><academic_description>Not entered</academic_description><syllabus>*Compiler Construction, phase order, compilation as
optimisation
*Architecture costs: Parallelism and Latency in uni and
multi-processors
*Architecture "independent" optimisation, dataflow analysis,
lattices and fixed points
*Code generation, register allocation and scheduling in superscalar
and vliw processors
*High level analysis based on dependence analysis. Intra and inter
procedural analysis, whole program analysis.
*High level transformations including linear algebraic
formalisation, unimodular transformations and space/time
representation
*Automated parallelisation. shared and distributed memory models.
Linear algebraic approach to parallelisation.
*Adaptive optimisation: Feedback directed optimisation, iterative
compilation, program specialisation and dynamic compilation eg JIT,
DBT
*Compiler infrastructure case studies: SUIF, Machine SUIF,
JIKES
*Current themes:low power compilation, automatic compiler
generation and machine learning.

Relevant QAA Computing Curriculum Sections: Compilers and Syntax
Directed Tools</syllabus><transferable_skills>Not entered</transferable_skills><reading_list>* A. Aho,R. Sethi, J.D.Ullman Compilers: Priciples,
Techniques and Tools.
* S. Muchnick, Advanced Compiler Design and Implementation Morgan
Kaufmann 1997
* R. Allen K. Kennedy Optimizing Compilers for Modern
Architectures: A
* K. D. Cooper, L. Torczon Engineering a Compiler Morgan Kaufmann
2003
* A selection of conference and journal paper as appropriate
</reading_list><study_abroad>Not entered</study_abroad><study_pattern>Lectures 20
Tutorials 0
Timetabled Laboratories 0
Non-timetabled assessed assignments 25
Private Study/Other 55
Total 100</study_pattern><keywords>Not entered</keywords></additional_info><contacts><course_organiser>Dr Mary Cryan
Tel: (0131 6)50 5153
Email: mcryan@inf.ed.ac.uk</course_organiser><course_secretary>Miss Kate Weston
Tel: (0131 6)50 2701
Email: Kate.Weston@ed.ac.uk</course_secretary></contacts></course>
